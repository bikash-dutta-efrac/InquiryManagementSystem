import React, { useState, useCallback, useMemo } from "react";
import {
  Search,
  Loader2,
  AlertTriangle,
  Clock,
  CheckCircle,
  TestTube2,
  FlaskConical,
  ClipboardList,
  DollarSign,
  ChevronDown,
  ChevronUp,
  Beaker,
  FileText,
  IndianRupee,
} from "lucide-react";
import { getSampleDetailsByRegNo } from "../services/api";


function formatAmount(num) {
  if (num === null || num === undefined) return 0;
  const number = parseFloat(num);
  if (number < 1000) return number.toFixed(0);
  const si = [
    { value: 1, symbol: "" },
    { value: 1e3, symbol: "K" },
    { value: 1e5, symbol: "L" },
    { value: 1e7, symbol: "Cr" },
    { value: 1e9, symbol: "B" },
  ];
  const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
  let i;
  for (i = si.length - 1; i > 0; i--) {
    if (number >= si[i].value) {
      break;
    }
  }
  return (number / si[i].value).toFixed(2).replace(rx, "$1") + si[i].symbol;
}

const formatDate = (dateString, includeTime = false) => {
  if (!dateString) return "N/A";
  try {
    // Robustly handle DD/MM/YYYY HH:MM:SS format
    const parts = dateString.split(/[\/ :]/);

    if (parts.length < 3) return dateString;

    // Note: JS Date constructor expects MM/DD/YYYY or YYYY-MM-DD.
    // We are converting DD/MM/YYYY to a safe Date object.
    const date = new Date(
      parts[2],      // Year (Index 2)
      parts[1] - 1,  // Month (Index 1, 0-indexed)
      parts[0],      // Day (Index 0)
      parts[3] || 0, // Hour
      parts[4] || 0, // Minute
      parts[5] || 0  // Second
    );

    if (isNaN(date.getTime())) {
      return dateString;
    }

    const dateOptions = { day: "2-digit", month: "short", year: "numeric" };
    const timeOptions = includeTime && parts.length > 3
      ? { hour: "2-digit", minute: "2-digit", hour12: true }
      : {};

    const formattedDate = date.toLocaleDateString("en-GB", dateOptions);
    const formattedTime = (includeTime && parts.length > 3)
      ? " " + date.toLocaleTimeString("en-US", timeOptions)
      : "";

    return formattedDate + formattedTime;

  } catch (e) {
    return dateString;
  }
};

const colorMap = {
  blue: {
    border: "border-t-4 border-blue-500",
    bg: "bg-blue-100",
    icon: "text-blue-600",
    badge: "bg-blue-100 text-blue-700",
  },
  green: {
    border: "border-t-4 border-green-500",
    bg: "bg-green-100",
    icon: "text-green-600",
    badge: "bg-green-500 text-white",
  },
  red: {
    border: "border-t-4 border-red-500",
    bg: "bg-red-100",
    icon: "text-red-600",
    badge: "bg-red-500 text-white",
  },
  orange: {
    border: "border-t-4 border-orange-500",
    bg: "bg-orange-100",
    icon: "text-orange-600",
    badge: "bg-orange-500 text-white",
  },
  teal: {
    border: "border-t-4 border-teal-500",
    bg: "bg-teal-100",
    icon: "text-teal-600",
    badge: "bg-teal-100 text-teal-700",
  },
  gray: {
    border: "border-t-4 border-gray-500",
    bg: "bg-gray-100",
    icon: "text-gray-600",
    badge: "bg-gray-100 text-gray-700",
  },
};

const getCalculatedStatus = (item) => {
    const completionDt = item.analysisCompletionDateTime;
    const mailingDt = item.mailingDate;
    const currentStatus = item.status;

    if (!completionDt) {
        return 'Pending from Lab End';
    }
    if (completionDt && !mailingDt) {
        return 'Pending from QA End';
    }

    if (mailingDt && currentStatus !== "Report Delivered") {
        return 'Report not Released'; // Analysis completed, QA done (mailingDt exists), but final report status isn't 'Delivered'
    }
    if (currentStatus === "Report Delivered") {
        return 'Report Delivered';
    }

    return currentStatus || "PENDING";
};

  const getStatusBadge = (item) => {
    const calculatedStatus = getCalculatedStatus(item);
    const text = calculatedStatus;

    const isDelivered = text === 'Report Delivered';
    const isPendingQA = text === 'Pending from QA End';
    const isPendingLab = text === 'Pending from Lab End';
    const isNotReleased = text === 'Report not Released';

    const color = isDelivered
        ? colorMap.green.badge
        : (isPendingQA || isNotReleased)
        ? colorMap.orange.badge 
        : isPendingLab
        ? colorMap.red.badge
        : colorMap.gray.badge;

    const icon = isDelivered ? (
      <HiCheckCircle className="w-4 h-4" />
    ) : (isPendingQA || isNotReleased) ? (
      <AlertTriangle className="w-4 h-4" /> 
    ) : (
      <HiClock className="w-4 h-4" /> 
    );

    return (
      <span
        className={`inline-flex items-center gap-1.5 px-3 py-1 rounded-full text-xs font-bold shadow-sm ${color}`}
      >
        {icon}
        {text}
      </span>
    );
  };

const SummaryCard = ({ title, value, color = "gray", icon }) => {
  const colorClasses = colorMap[color] || colorMap.gray;

  return (
    <div
      className={`bg-white p-6 rounded-2xl shadow-xl transform transition-all duration-300 hover:scale-105 ${colorClasses.border}`}
    >
      <div className="flex items-center justify-between mb-3">
        <span className="text-xs font-bold uppercase text-gray-500">
          {title}
        </span>
        <div
          className={`p-2 mx-2 rounded-full ${colorClasses.bg} ${colorClasses.icon}`}
        >
          {icon}
        </div>
      </div>
      <p className="text-3xl font-bold text-gray-800">{value}</p>
    </div>
  );
};

const SampleDetailsCard = ({ data }) => {
  // Assuming data[0] exists since this component is only rendered if data.length > 0
  const { registrationNo, sampleName, registrationDate } = data[0];

  const totalRegValue = data.reduce(
    (sum, item) => sum + (parseFloat(item.distributedRegisVal) || 0),
    0
  );

  const details = [
    {
      label: "Registration No",
      value: registrationNo.replace(/\s+-\s*$/, ''),
      icon: FileText, // Replaced HiClipboardDocument
      color: "text-blue-600",
      widthClass: "lg:col-span-2",
    },
    {
      label: "Sample Name",
      value: sampleName,
      icon: TestTube2,
      color: "text-teal-600",
      widthClass: "lg:col-span-2",
      textClass: "line-clamp-2",
    },
    {
      label: "Reg. Date",
      value: formatDate(registrationDate),
      icon: Clock, // Replaced HiClock
      color: "text-cyan-600",
      widthClass: "lg:col-span-1",
    },
    {
      label: "Total Reg. Value",
      value: `â‚¹${formatAmount(totalRegValue)}`,
      icon: IndianRupee, // Replaced HiCurrencyRupee
      color: "text-pink-600",
      widthClass: "lg:col-span-1",
    },
  ];

  return (
    <div className="bg-white p-6 rounded-2xl shadow-2xl mt-6 border border-gray-100">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 lg:gap-4">
        {details.map((item, index) => (
          <div
            key={index}
            className={`flex items-center space-x-3 p-3 bg-gray-50 rounded-xl shadow-inner ${item.widthClass}`}
          >
            <item.icon className={`w-6 h-6 ${item.color} flex-shrink-0`} />
            <div className="overflow-hidden">
              <p className="text-xs font-medium text-gray-500">{item.label}</p>
              <p
                className={`text-sm font-bold text-gray-800 break-words ${item.textClass || ''}`}
              >
                {item.value}
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// --- NEW/REFRACTORED COMPONENTS FOR LAB GROUPING ---

const LabDetailRow = React.memo(({ lab }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const total = lab.releasedCount + lab.pendingCount;

  return (
    <>
      {/* Main Lab Summary Row */}
      <tr
        className={`transition-all duration-300 cursor-pointer ${isExpanded ? 'bg-blue-50 hover:bg-blue-100 shadow-inner' : 'hover:bg-gray-50'}`}
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-blue-700">
          <div className="flex items-center space-x-2">
            <FlaskConical className="w-5 h-5 text-blue-500" />
            <span>{lab.labName || 'N/A'}</span>
          </div>
        </td>
        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium text-gray-900">
          <span className="font-bold text-lg">{total}</span>
        </td>
        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
          <span className="text-green-600 font-bold">{lab.releasedCount}</span>
        </td>
        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
          <span className="text-red-600 font-bold">{lab.pendingCount}</span>
        </td>
        <td className="px-6 py-4 whitespace-nowrap text-center">
          <button
            onClick={(e) => { e.stopPropagation(); setIsExpanded(!isExpanded); }}
            className="flex items-center justify-center mx-auto text-xs font-semibold text-indigo-600 bg-indigo-100 px-3 py-1.5 rounded-full hover:bg-indigo-200 transition-colors"
          >
            {isExpanded ? 'Hide Details' : 'See Details'}
            {isExpanded ? (
              <ChevronUp className="w-4 h-4 ml-1" />
            ) : (
              <ChevronDown className="w-4 h-4 ml-1" />
            )}
          </button>
        </td>
      </tr>

      {/* Expandable Detail Row */}
      {isExpanded && (
        <tr className="bg-blue-50/70">
          <td colSpan="5" className="p-0 border-t border-blue-200">
            <div className="p-4">
              <h5 className="text-sm font-bold text-gray-700 mb-3 ml-2">
                Parameter Breakdown in {lab.labName} ({total} Items)
              </h5>
              <div className="overflow-x-auto rounded-lg border border-blue-200">
                <table className="min-w-full divide-y divide-blue-100">
                  <thead className="bg-blue-100">
                    <tr>
                      <th className="pl-6 py-2 text-left text-xs font-bold uppercase tracking-wider text-gray-600">
                        Parameter
                      </th>
                      <th className="px-6 py-2 text-center text-xs font-bold uppercase tracking-wider text-gray-600 w-1/4">
                        Completion Time
                      </th>
                      <th className="pr-6 py-2 text-center text-xs font-bold uppercase tracking-wider text-gray-600 w-1/4">
                        Status
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-blue-50">
                    {lab.parameters.map((param, index) => (
                      <tr key={index} className="hover:bg-white transition-colors">
                        <td className="pl-6 py-3 whitespace-normal text-sm font-medium text-gray-900">
                          {param.parameter}
                        </td>
                        <td className="px-6 py-3 whitespace-nowrap text-center text-sm text-gray-600">
                          {param.analysisCompletionDateTime
                            ? formatDate(param.analysisCompletionDateTime, true)
                            : "---"}
                        </td>
                        <td className="px-6 py-3 whitespace-nowrap text-center">
                          {getStatusBadge(param.calculatedStatus)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </td>
        </tr>
      )}
    </>
  );
});


const SampleAnalysisTable = React.memo(({ labGroupedData }) => {
  return (
    <div className="bg-white p-6 rounded-2xl shadow-2xl border border-gray-100">
      <h3 className="text-xl font-bold text-gray-800 mb-4">
        Lab-Wise Analysis Summary
      </h3>

      {/* Desktop/Tablet View */}
      <div className="overflow-x-auto rounded-xl shadow-lg border border-gray-200 hidden lg:block">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-indigo-600/95 text-white">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-bold uppercase tracking-wider rounded-tl-xl">
                Lab Name
              </th>
              <th className="px-6 py-3 text-center text-xs font-bold uppercase tracking-wider">
                Total Parameters
              </th>
              <th className="px-6 py-3 text-center text-xs font-bold uppercase tracking-wider">
                Released Count
              </th>
              <th className="px-6 py-3 text-center text-xs font-bold uppercase tracking-wider">
                Pending Count
              </th>
              <th className="px-6 py-3 text-center text-xs font-bold uppercase tracking-wider rounded-tr-xl">
                Details
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-100">
            {labGroupedData.map((lab, index) => (
              <LabDetailRow key={lab.labName} lab={lab} />
            ))}
          </tbody>
        </table>
      </div>

      {/* Mobile View: Cards */}
      <div className="lg:hidden space-y-4">
        {labGroupedData.map((lab, index) => (
          <div
            key={lab.labName}
            className="bg-white p-4 rounded-xl shadow-lg border border-gray-200"
          >
            <div className="flex items-center justify-between mb-3 border-b pb-2">
              <div className="flex items-center space-x-2">
                <FlaskConical className="w-5 h-5 text-blue-600" />
                <h4 className="text-base font-bold text-blue-700">
                  {lab.labName || 'N/A'}
                </h4>
              </div>
              <span className="text-sm font-bold text-gray-600 bg-gray-100 px-3 py-1 rounded-full">
                {lab.releasedCount + lab.pendingCount} Total
              </span>
            </div>

            <div className="grid grid-cols-2 gap-y-2 text-sm mb-3">
              <DetailItem label="Released" value={lab.releasedCount} color="text-green-600" />
              <DetailItem label="Pending" value={lab.pendingCount} color="text-red-600" />
            </div>

            <ExpandableMobileDetails lab={lab} />
          </div>
        ))}
      </div>

      {labGroupedData.length === 0 && (
        <div className="text-center py-10 text-gray-500 font-medium">
          No lab data found for this registration number.
        </div>
      )}
    </div>
  );
});

const ExpandableMobileDetails = ({ lab }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  return (
    <>
      <button
        className="w-full text-center py-2 text-indigo-600 font-semibold text-sm bg-indigo-50 rounded-lg mt-2 flex items-center justify-center hover:bg-indigo-100 transition-colors"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        {isExpanded ? 'Hide Parameters' : 'View Parameters'}
        {isExpanded ? (
          <ChevronUp className="w-4 h-4 ml-1" />
        ) : (
          <ChevronDown className="w-4 h-4 ml-1" />
        )}
      </button>

      {isExpanded && (
        <div className="mt-3 space-y-3 pt-3 border-t border-gray-100">
          {lab.parameters.map((param, index) => (
            <div key={index} className="p-3 bg-white border border-gray-100 rounded-lg shadow-sm">
              <div className="flex justify-between items-start">
                <h6 className="text-sm font-bold text-gray-900 pr-2">
                  {param.parameter}
                </h6>
                {getStatusBadge(param.calculatedStatus)}
              </div>
              <div className="mt-1 text-xs text-gray-500 font-medium">
                Completion:{" "}
                <span className="text-gray-700 font-semibold">
                  {param.analysisCompletionDateTime
                    ? formatDate(param.analysisCompletionDateTime, true)
                    : "---"}
                </span>
              </div>
            </div>
          ))}
        </div>
      )}
    </>
  );
};

const DetailItem = ({ label, value, color }) => (
  <div className="flex flex-col">
    <span className="text-xs font-medium text-gray-500">{label}</span>
    <span className={`font-semibold ${color}`}>{value}</span>
  </div>
);

// --- NEW COMPONENT: Attractive Initial View ---
const InitialStateView = ({ showInitialLoader }) => (
    <div className="flex flex-col justify-center items-center py-20 bg-white rounded-2xl shadow-xl border border-gray-200">
        {showInitialLoader ? (
            <div className="flex flex-col items-center">
                <div className="relative mb-6 w-20 h-20">
                    <FlaskConical className="w-16 h-16 text-blue-500 absolute animate-ping opacity-75" />
                    <TestTube2 className="w-16 h-16 text-indigo-600 absolute top-0 left-0" />
                </div>
                <span className="text-xl font-bold text-indigo-700 mt-2">
                    Initializing Sample Portal...
                </span>
                <span className="text-sm font-medium text-gray-500">
                    Preparing for your first search.
                </span>
            </div>
        ) : (
            <div className="flex flex-col items-center">
                <div className="relative mb-6 w-20 h-20">
                    <Search className="w-16 h-16 text-gray-400 absolute top-0 left-0" />
                    <ClipboardList className="w-8 h-8 text-blue-500 absolute bottom-0 right-0 p-1 bg-white rounded-full border-2 border-white" />
                </div>
                <span className="text-xl font-medium text-gray-600">
                    Enter a **Registration Number** to begin analysis.
                </span>
                <span className="text-sm text-gray-400 mt-1">
                    Please use the search bar above to fetch sample details.
                </span>
            </div>
        )}
    </div>
);
// ---------------------------------------------


export default function SampleAnalysis() {
  const [regNo, setRegNo] = useState("");
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [initialSearchDone, setInitialSearchDone] = useState(false);
  const [showInitialLoader, setShowInitialLoader] = useState(true);

  const sampleDetails = data && data.length > 0 ? data[0] : null;

  // --- Group data by lab for the new table structure ---
  const labGroupedData = useMemo(() => {
    if (!data || data.length === 0) return [];

    const groups = data.reduce((acc, item) => {
      const labName = item.lab || 'Unassigned Lab';

      if (!acc[labName]) {
        acc[labName] = {
          labName,
          parameters: [],
          releasedCount: 0,
          pendingCount: 0,
        };
      }

      const calculatedStatus = getCalculatedStatus(item);

      acc[labName].parameters.push({
        ...item,
        calculatedStatus,
      });

      if (calculatedStatus === "Report Delivered") {
        acc[labName].releasedCount += 1;
      } else {
        acc[labName].pendingCount += 1;
      }

      return acc;
    }, {});

    return Object.values(groups);
  }, [data]);
  // ---------------------------------------------------------


  const summaryData = useMemo(() => {
    if (!data || data.length === 0) {
      return {
        totalParameters: 0,
        pending: 0,
        released: 0,
        pendingRegValue: 0,
      };
    }

    const calculatedData = data.map(item => ({
        ...item,
        calculatedStatus: getCalculatedStatus(item)
    }));

    const released = calculatedData.filter((item) => item.calculatedStatus === "Report Delivered");
    const pendingItems = calculatedData.filter((item) => item.calculatedStatus !== "Report Delivered");

    const pendingRegValue = pendingItems.reduce(
      (sum, item) => sum + (parseFloat(item.distributedRegisVal) || 0),
      0
    );

    return {
      totalParameters: data.length,
      pending: pendingItems.length,
      released: released.length,
      pendingRegValue: pendingRegValue,
    };
  }, [data]);

  const handleSearch = useCallback(async () => {
    const trimmedRegNo = regNo?.trim(); 
    
    // This is set on explicit user action
    setInitialSearchDone(true); 
    setShowInitialLoader(false); // Stop the initial loader once user interacts

    if (!trimmedRegNo) {
      setError("Please enter a Registration Number.");
      setData(null);
      return;
    }

    if (trimmedRegNo.length < 16) {
        setError("Registration Number must be at least 16 characters long.");
        setData(null);
        return;
    }

    setLoading(true);
    setError(null);
    setData(null);

    try {
      const result = await getSampleDetailsByRegNo(trimmedRegNo);

      if (!result || result.length === 0) {
        setError(`No analysis data found for Registration No: ${trimmedRegNo}`);
        setData([]);
      } else {
        setData(result);
      }
    } catch (e) {
      console.error("API Error:", e);
      setError("An error occurred while fetching data. Please try again.");
      setData([]);
    } finally {
      setLoading(false);
    }
  }, [regNo]);

  React.useEffect(() => {
    const timer = setTimeout(() => {
        if (!initialSearchDone) {
            setShowInitialLoader(false);
        }
    }, 1000);

    return () => clearTimeout(timer);
  }, [initialSearchDone]);


  return (
    <div className="bg-gray-50 min-h-screen rounded-3xl shadow-2xl font-inter">
      <div className="relative p-6">
        <div className="absolute top-0 left-0">
          <div className="relative group">
            <div className="relative flex items-center justify-center px-8 py-2 bg-gradient-to-r from-sky-600 via-blue-600 to-indigo-700 text-white text-medium font-extrabold tracking-wider rounded-br-4xl shadow-xl border-2 border-sky-400/30 backdrop-blur-sm">
              <div className="flex items-center gap-2">
                <span>Sample Analysis</span>
              </div>
            </div>
          </div>
        </div>

        <div className="absolute top-4 right-4 w-16 h-16 bg-gradient-to-br from-sky-100/40 to-blue-100/40 rounded-full blur-xl animate-pulse"></div>
        <div className="absolute bottom-4 left-4 w-12 h-12 bg-gradient-to-br from-blue-100/30 to-sky-100/30 rounded-full blur-lg animate-pulse delay-150"></div>

        <div className="absolute top-6 right-8 z-20 w-full max-w-xs sm:max-w-md">
          <div
            className="flex items-center p-1 rounded-full bg-white
                       shadow-2xl shadow-blue-400/30 transition-all duration-300
                       transform hover:scale-[1.01] border-2 border-blue-200/50
                       focus-within:border-blue-400 focus-within:shadow-indigo-300/60"
          >
            <input
              type="text"
              value={regNo}
              onChange={(e) => setRegNo(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSearch()}
              placeholder="Enter Registration No"
              className="flex-grow p-2 pl-5 text-sm bg-transparent rounded-full focus:outline-none
                         placeholder-gray-400 font-semibold text-gray-700
                         focus:border-transparent"
            />
            <button
              onClick={handleSearch}
              disabled={loading}
              className="flex-shrink-0 w-10 h-10 rounded-full
                         bg-gradient-to-br from-indigo-600 to-sky-500 text-white
                         shadow-lg shadow-indigo-500/50
                         transition duration-300 ease-in-out flex items-center justify-center
                         disabled:opacity-60 disabled:shadow-none
                         transform hover:scale-[1.05] active:scale-90"
              aria-label="Search"
            >
              {loading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <Search className="w-5 h-5" />
              )}
            </button>
          </div>
        </div>
      </div>

      <div className="p-4 sm:p-8 pt-6 sm:pt-8">
        {sampleDetails && !loading && <SampleDetailsCard data={data} />}

        <div className="mt-8 min-h-[300px]">
          {loading && (
            <div className="flex flex-col justify-center items-center py-20 bg-white rounded-2xl shadow-xl border border-gray-200">
              <Loader2 className="w-10 h-10 animate-spin text-indigo-500 mb-4" />
              <span className="text-xl font-bold text-gray-700">
                Analyzing Sample Data...
              </span>
              <span className="text-sm font-medium text-gray-500 mt-1">
                Please wait while we fetch the sample breakdown.
              </span>
            </div>
          )}

          {error && initialSearchDone && !loading && (
            <div className="p-8 bg-red-50 border border-red-300 rounded-2xl flex items-center justify-center space-x-3 shadow-md">
              <AlertTriangle className="w-6 h-6 text-red-600" />
              <p className="text-lg font-medium text-red-800">{error}</p>
            </div>
          )}

          {data && data.length > 0 && !loading && (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 mt-6">
              <SummaryCard
                title="Total Parameters"
                value={summaryData.totalParameters}
                color="blue"
                icon={<Beaker className="w-5 h-5" />} // Replaced HiBeaker
              />
              <SummaryCard
                title="Report Delivered"
                value={summaryData.released}
                color="green"
                icon={<CheckCircle className="w-5 h-5" />} // Replaced HiCheckCircle
              />
              <SummaryCard
                title="Pending"
                value={summaryData.pending}
                color="red"
                icon={<Clock className="w-5 h-5" />} // Replaced HiClock
              />
              <SummaryCard
                title="Pending Value"
                value={`â‚¹${formatAmount(summaryData.pendingRegValue)}`}
                color="teal"
                icon={<IndianRupee className="w-5 h-5" />} // Replaced HiCurrencyRupee
              />
            </div>
          )}

          {data && data.length > 0 && !loading && (
            <SampleAnalysisTable labGroupedData={labGroupedData} />
          )}

          {!loading && !initialSearchDone && !data && !error && (
            <InitialStateView showInitialLoader={showInitialLoader} />
          )}
        </div>
      </div>
    </div>
  );
}