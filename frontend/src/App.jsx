import React, { useState, useEffect, Suspense, useCallback } from "react";
import Filters from "./components/Filters";
import InquiryList from "./components/InquiryList";
import InquiryOverview from "./components/InquiryOverview";
import SideMenus from "./components/SideMenus";
import BdProjection from "./components/BdProjection";
import LabAnalysis from "./components/LabAnalysis"; 
import SampleAnalysis from "./components/SampleAnalysis"; // <-- ADDED IMPORT
const GraphicalAnalysis = React.lazy(() =>
Â  import("./components/GraphicalAnalysis")
);
import SubInquiryList from "./components/SubInquiryList";
import { BarChart3, List, AlertTriangle, RefreshCcw } from "lucide-react";
import useInquiries from "./hooks/useInquiries";
import useProjections from "./hooks/useProjections";
import useLabAnalysis from "./hooks/useLabAnalysis"; 
import { startOfMonth, endOfMonth, format } from "date-fns";


export default function App() {
Â  const [view, setView] = useState("list");
Â  const [subView, setSubView] = useState(null);
Â  const [queryType, setQueryType] = useState("inqDate");
Â  const [showGraph, setShowGraph] = useState(false);
Â  const [error, setError] = useState(null);
Â  const [isMinimized, setIsMinimized] = useState(false);

Â  const handleToggleMinimize = () => {
Â  Â  setIsMinimized((prev) => !prev);
Â  };

Â  const today = new Date();
Â  const minDate = new Date();
Â  minDate.setFullYear(today.getFullYear() - 20);

Â  // ðŸŸ¢ NEW: Define the start date for "All Data"
Â  const allDataRangeStart = new Date(2025, 3, 1); // April is month index 3 (0-based)
Â  const defaultToDate = today.toISOString().split("T")[0]; // Current date

Â  const defaultFilters = {
Â  Â  filterType: "all", // ðŸŸ¢ UPDATED: Default to "all"
Â  Â  range: {
Â  Â  Â  start: allDataRangeStart.toISOString().split("T")[0], // ðŸŸ¢ UPDATED: Use All Data start
Â  Â  Â  end: defaultToDate, // Current Date
Â  Â  },
Â  Â  month: (today.getMonth() + 1).toString(),
Â  Â  year: today.getFullYear().toString(),
Â  Â  verticals: [],
Â  Â  bdNames: [],
Â  Â  clientNames: [],
Â  Â  labNames: [],
Â  Â  excludeVerticals: false,
Â  Â  excludeBds: false,
Â  Â  excludeClients: false,
Â  Â  excludeLabs: false,
Â  Â  sortOrder: "newest",
Â  Â  dateField: "inqDate",
Â  Â  labStatusFilter: null, 
Â  };

Â  const [filters, setFilters] = useState({
Â  Â  dateField: defaultFilters.dateField,
Â  Â  fromDate: defaultFilters.range.start,
Â  Â  toDate: defaultFilters.range.end,
Â  Â  sortOrder: defaultFilters.sortOrder,
Â  Â  labStatusFilter: defaultFilters.labStatusFilter,
Â  });

Â  const { inquiries, loading, fetchInquiries } = useInquiries(defaultFilters);

Â  const { projections, loading: projectionsLoading } = useProjections(
Â  Â  queryType === "bdProjection" ? filters : null
Â  );
Â  
Â  // ðŸŸ¢ UPDATE HOOK TO GET totalCount
Â  const { 
Â  Â  sampleSummaries,
Â  Â  labSummaries,
Â  Â  sampleOverview,
Â  Â  loading: labAnalysisLoading, 
Â  Â  totalCount 
Â  } = useLabAnalysis(
Â  Â  queryType === "labAnalysis" ? filters : null
Â  );


Â  const safeFetch = useCallback(
Â  Â  async (fetchParams) => {
Â  Â  Â  setError(null);
Â  Â  Â  
Â  Â  Â  if (fetchParams.dateField === "labAnalysis" || fetchParams.dateField === "sampleAnalysis") {
Â  Â  Â  Â  Â return; 
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  try {
Â  Â  Â  Â  if (fetchParams.dateField !== "bdProjection") {
Â  Â  Â  Â  Â  await fetchInquiries(fetchParams);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  await fetchInquiries({ ...fetchParams, dateField: "regisDate" });
Â  Â  Â  Â  }
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  setError("Failed to fetch data. Please try again.");
Â  Â  Â  Â  console.error("Fetch error:", e);
Â  Â  Â  }
Â  Â  },
Â  Â  [fetchInquiries]
Â  );

Â  useEffect(() => {
Â  Â  // Only call safeFetch for non-analysis views.
Â  Â  if (queryType !== 'labAnalysis' && queryType !== 'sampleAnalysis') {
Â  Â  Â  Â  safeFetch(filters);
Â  Â  }
Â  }, [filters, safeFetch, queryType]);

Â  useEffect(() => {
Â  Â  if (view === "graph") {
Â  Â  Â  const timer = setTimeout(() => setShowGraph(true), 200);
Â  Â  Â  return () => clearTimeout(timer);
Â  Â  } else {
Â  Â  Â  setShowGraph(false);
Â  Â  }
Â  }, [view]);

Â  const onFiltersChange = (newFilterState) => {
Â  Â  
Â  Â  // 1. Destructure LabAnalysis-specific fields. Pagination fields (pageNumber, pageSize) are discarded.
Â  Â  const { 
Â  Â  Â  reviewsBy, 
Â  Â  Â  labStatusFilter, 
Â  Â  Â  pageNumber, // Discarded as per user request
Â  Â  Â  pageSize, Â  // Discarded as per user request
Â  Â  Â  ...restOfNewFilterState 
Â  Â  } = newFilterState;
Â  Â  
Â  Â  // 2. Initialize newFilters with current state as base
Â  Â  let newFilters = { ...filters };
Â  Â  
Â  Â  // 3. Merge all non-pagination filter changes. No page number or size logic is included.
Â  Â  newFilters = {
Â  Â  Â  Â  ...newFilters,
Â  Â  Â  Â  ...restOfNewFilterState,
Â  Â  };
Â  Â  
Â  Â  // 4. Handle labAnalysis specific filters (which are stripped in restOfNewFilterState)
Â  Â  if (queryType === 'labAnalysis') {
Â  Â  Â  Â  newFilters.labStatusFilter = labStatusFilter !== undefined ? labStatusFilter : newFilters.labStatusFilter;
Â  Â  Â  Â  newFilters.reviewsBy = reviewsBy !== undefined ? reviewsBy : newFilters.reviewsBy;
Â  Â  } else if (queryType === 'sampleAnalysis') {
        // SampleAnalysis does not need filters, but we ensure they are not used
        newFilters.labStatusFilter = null;
        newFilters.reviewsBy = null;
    }

Â  Â  // 5. Common field updates (sortOrder, dateField)
Â  Â  newFilters.dateField = queryType;
Â  Â  newFilters.sortOrder = newFilterState.sortOrder || filters.sortOrder;
Â  Â  
Â  Â  // 6. Date Range Logic 
Â  Â  if (newFilterState.filterType === "range") {
Â  Â  Â  let startDate = new Date(newFilterState.range?.start);
Â  Â  Â  let endDate = new Date(newFilterState.range?.end);

Â  Â  Â  if (
Â  Â  Â  Â  startDate >= minDate &&
Â  Â  Â  Â  startDate <= today &&
Â  Â  Â  Â  endDate >= minDate &&
Â  Â  Â  Â  endDate <= today &&
Â  Â  Â  Â  startDate <= endDate
Â  Â  Â  ) {
Â  Â  Â  Â  if (queryType === "bdProjection") {
Â  Â  Â  Â  Â  startDate = startOfMonth(startDate);
Â  Â  Â  Â  Â  endDate = endOfMonth(endDate);
Â  Â  Â  Â  }
Â  Â  Â  Â  newFilters.fromDate = format(startDate, "yyyy-MM-dd");
Â  Â  Â  Â  newFilters.toDate = format(endDate, "yyyy-MM-dd");
Â  Â  Â  } else {
Â  Â  Â  Â  console.warn("â›” Invalid date range, skipping filter update");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  newFilters.month = null;
Â  Â  Â  newFilters.year = null;
Â  Â  } else if (newFilterState.filterType === "month" && newFilterState.year) {
Â  Â  Â  newFilters.year = Number(newFilterState.year);
Â  Â  Â  if (newFilterState.month) newFilters.month = Number(newFilterState.month);
Â  Â  Â  newFilters.fromDate = null;
Â  Â  Â  newFilters.toDate = null;
Â  Â  } else if (newFilterState.filterType === "all") { // ðŸŸ¢ NEW: "All Data" logic
Â  Â  Â  newFilters.fromDate = defaultFilters.range.start;
Â  Â  Â  newFilters.toDate = defaultFilters.range.end;
Â  Â  Â  newFilters.month = null;
Â  Â  Â  newFilters.year = null;
Â  Â  }


Â  Â  // 7. Handle non-labAnalysis/sampleAnalysis specific filters
Â  Â  if (queryType === 'labAnalysis') {
Â  Â  Â  Â  newFilters.labNames = newFilterState.labNames,
Â  Â  Â  Â  newFilters.excludeLabs = newFilterState.excludeLabs,
Â  Â  Â  Â  newFilters.bdNames = [];
Â  Â  Â  Â  newFilters.clientNames = [];
Â  Â  Â  Â  newFilters.verticals = [];
Â  Â  Â  Â  newFilters.excludeVerticals = false;
Â  Â  Â  Â  newFilters.excludeBds = false;
Â  Â  Â  Â  newFilters.excludeClients = false;
Â  Â  } else if (queryType === 'sampleAnalysis') {
        // Ensure no filters are applied for SampleAnalysis
        newFilters.bdNames = [];
Â  Â  Â  Â  newFilters.clientNames = [];
Â  Â  Â  Â  newFilters.verticals = [];
Â  Â  Â  Â  newFilters.labNames = [];
Â  Â  Â  Â  newFilters.excludeVerticals = false;
Â  Â  Â  Â  newFilters.excludeBds = false;
Â  Â  Â  Â  newFilters.excludeClients = false;
        newFilters.excludeLabs = false;
    } else { // Standard Inquiry/BD Projection
Â  Â  Â  Â  newFilters.bdNames = newFilterState.bdNames || [];
Â  Â  Â  Â  newFilters.clientNames = newFilterState.clientNames || [];
Â  Â  Â  Â  newFilters.verticals = newFilterState.verticals || [];
Â  Â  Â  Â  newFilters.excludeVerticals = newFilterState.excludeVerticals;
Â  Â  Â  Â  newFilters.excludeBds = newFilterState.excludeBds;
Â  Â  Â  Â  newFilters.excludeClients = newFilterState.excludeClients;
Â  Â  Â  Â  newFilters.labStatusFilter = null; 
Â  Â  Â  Â  newFilters.reviewsBy = null;
Â  Â  Â  Â  newFilters.labNames = [];
Â  Â  Â  Â  newFilters.excludeLabs = false;
Â  Â  }


Â  Â  console.log("app.jsx", newFilters)
Â  Â  // 8. Final State Update
Â  Â  setFilters(newFilters);
Â  };

Â  const onDateFieldChange = async (dateField) => {
Â  Â  setView("list");
Â  Â  setSubView(null);

Â  Â  let updatedFilters = { 
Â  Â  Â  Â  ...filters, 
Â  Â  Â  Â  dateField,
Â  Â  };
Â  Â  if (dateField === 'labAnalysis' || dateField === 'sampleAnalysis') {
Â  Â  Â  Â  updatedFilters = {
Â  Â  Â  Â  Â  Â  ...updatedFilters,
Â  Â  Â  Â  Â  Â  verticals: [],
Â  Â  Â  Â  Â  Â  bdNames: [],
Â  Â  Â  Â  Â  Â  clientNames: [],
Â  Â  Â  Â  Â  Â  excludeVerticals: false,
Â  Â  Â  Â  Â  Â  excludeBds: false,
Â  Â  Â  Â  Â  Â  excludeClients: false,
Â  Â  Â  Â  Â  Â  // ðŸ”½ ENSURE LAB STATUS IS RESET ON LAB/SAMPLE VIEW CHANGE
Â  Â  Â  Â  Â  Â  labStatusFilter: null,
Â  Â  Â  Â  Â  Â  reviewsBy: null,
Â  Â  Â  Â  };
Â  Â  }
Â  Â  
Â  Â  setQueryType(dateField);
Â  Â  setFilters(updatedFilters);
Â  };

Â  const handleResetAll = () => {
Â  Â  setError(null);
Â  Â  setFilters({
Â  Â  Â  // ðŸŸ¢ UPDATED: Reset to "all" filter type
Â  Â  Â  filterType: defaultFilters.filterType, 
Â  Â  Â  fromDate: defaultFilters.range.start,
Â  Â  Â  toDate: defaultFilters.range.end,
Â  Â  Â  sortOrder: defaultFilters.sortOrder,
Â  Â  Â  // ðŸ”½ UPDATED: Use new status filter state
Â  Â  Â  labStatusFilter: defaultFilters.labStatusFilter, 
Â  Â  Â  reviewsBy: null,
Â  Â  });
Â  };

Â  const handleCardClick = (type) => setSubView(type);
Â  const handleBack = () => setSubView(null);

Â  const filterSubData = () => {
Â  Â  switch (subView) {
Â  Â  Â  case "inquiries":
Â  Â  Â  Â  return { title: "All Inquiries", data: inquiries };
Â  Â  Â  case "quotations":
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  title: "All Quotations",
Â  Â  Â  Â  Â  data: inquiries.filter((d) => d.quotNo),
Â  Â  Â  Â  };
Â  Â  Â  case "approved":
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  title: "Approved Quotations",
Â  Â  Â  Â  Â  data: inquiries.filter((d) => d.quotNo && d.regisNo),
Â  Â  Â  Â  };
Â  Â  Â  case "unapproved":
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  title: "Unapproved Quotations",
Â  Â  Â  Â  Â  data: inquiries.filter((d) => d.quotNo && !d.regisNo),
Â  Â  Â  Â  };
Â  Â  Â  case "registrations":
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  title: "All Registrations",
Â  Â  Â  Â  Â  data: inquiries.filter((d) => d.regisNo),
Â  Â  Â  Â  };
Â  Â  Â  default:
Â  Â  Â  Â  return { title: "", data: [] };
Â  Â  }
Â  };

Â  const getSortedInquiries = (data, dateField, sortOrder) => {
Â  Â  const sourceData = queryType === 'labAnalysis' ? sampleSummaries : data; 

Â  Â  if (!sourceData || sourceData.length === 0) return [];
Â  Â  
Â  Â  return [...sourceData].sort((a, b) => {
Â  Â  Â  const dateKey = queryType === 'labAnalysis' ? 'RegDate' : dateField; 
Â  Â  Â  
Â  Â  Â  // Use case-insensitive access to handle API inconsistencies
Â  Â  Â  const dateA = new Date(a[dateKey] || a[dateKey.toLowerCase()] || a[dateKey.toUpperCase()]);
Â  Â  Â  const dateB = new Date(b[dateKey] || b[dateKey.toLowerCase()] || b[dateKey.toUpperCase()]);

Â  Â  Â  if (isNaN(dateA) || isNaN(dateB)) return 0;
Â  Â  Â  
Â  Â  Â  return sortOrder === "newest" ? dateB - dateA : dateA - dateB; // FIX: Should be dateB - dateA in both cases
Â  Â  });
Â  };

Â  const sortedInquiries = getSortedInquiries(
Â  Â  inquiries,
Â  Â  filters.dateField,
Â  Â  filters.sortOrder
Â  );
Â  
Â  const totalLoading = loading || projectionsLoading || labAnalysisLoading;


Â  return (
Â  Â  <div className="flex h-screen bg-gray-100">
Â  Â  Â  <SideMenus
Â  Â  Â  Â  activeView={queryType}
Â  Â  Â  Â  onViewChange={onDateFieldChange}
Â  Â  Â  Â  isMinimized={isMinimized}
Â  Â  Â  Â  onToggleMinimize={handleToggleMinimize}
Â  Â  Â  />

Â  Â  Â  {/* The main content area starts here */}
Â  Â  Â  <main
Â  Â  Â  Â  className={`flex-1 overflow-y-auto relative transition-all duration-300 ${
Â  Â  Â  Â  Â  isMinimized ? "ml-25" : "ml-56"
Â  Â  Â  Â  }`}
Â  Â  Â  >
Â  Â  Â  Â  {/* Global Loader */}
Â  Â  Â  Â  {totalLoading && (
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className={`fixed top-0 right-0 bottom-0 ${
Â  Â  Â  Â  Â  Â  Â  isMinimized ? "left-20" : "left-56"
Â  Â  Â  Â  Â  Â  } bg-white/60 flex items-center justify-center z-40 transition-all duration-300`}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <div className="animate-spin h-10 w-10 border-4 border-blue-600 border-t-transparent rounded-full"></div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {error && !totalLoading && (
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className={`fixed top-4 right-4 z-40 flex justify-center transition-all duration-300 ${
Â  Â  Â  Â  Â  Â  Â  isMinimized ? "left-20" : "left-56"
Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <div className="bg-red-50 border border-red-200 text-red-700 px-6 py-4 rounded-xl shadow-lg flex items-center gap-3 max-w-xl">
Â  Â  Â  Â  Â  Â  Â  <AlertTriangle className="w-6 h-6 text-red-500" />
Â  Â  Â  Â  Â  Â  Â  <span className="flex-1">{error}</span>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleResetAll}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex items-center gap-1 text-sm font-medium text-red-600 hover:text-red-800"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <RefreshCcw className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Retry
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  <div className="py-4 px-4">
Â  Â  Â  Â  Â  {/* Filters are always shown */}
Â  Â  Â  Â  Â  <div className="max-w-6xl mx-auto mb-6">
Â  Â  Â  Â  Â  Â  {queryType !== "sampleAnalysis" && (
            <Filters
                onChange={onFiltersChange}
                onResetAll={handleResetAll}
                disabled={totalLoading}
                queryType={queryType}
            />
            )}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  {subView && queryType !== "bdProjection" && queryType !== "labAnalysis" ? (
Â  Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto px-2 relative">
Â  Â  Â  Â  Â  Â  Â  Â  <SubInquiryList
Â  Â  Â  Â  Â  Â  Â  Â  Â  {...filterSubData()}
Â  Â  Â  Â  Â  Â  Â  Â  Â  queryType={subView}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onBack={handleBack}
Â  Â  Â  Â  Â  Â  Â  Â  Â  loading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : queryType === "labAnalysis" ? (
Â  Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto px-2 relative">
Â  Â  Â  Â  Â  Â  Â  Â  <LabAnalysis 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  data={sampleSummaries} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  labSummaryData={labSummaries}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sampleOverview={sampleOverview}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  filters={filters}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setFilters={onFiltersChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  totalCount={totalCount}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : queryType === "sampleAnalysis" ? (
Â  Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto px-2 relative">
Â  Â  Â  Â  Â  Â  Â  Â  <SampleAnalysis /> 
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto mb-8 px-2 relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {queryType !== "bdProjection" && queryType !== "labAnalysis" && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <InquiryOverview
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  data={sortedInquiries} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  queryType={queryType}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onCardClick={handleCardClick}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  loading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-center my-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {queryType !== "bdProjection" && queryType !== "labAnalysis" && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative flex items-center bg-white rounded-full p-2 shadow-lg border border-gray-200 transition-all duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`absolute top-1 bottom-1 w-[48%] rounded-full bg-gradient-to-r from-blue-500 via-cyan-500 to-teal-500 shadow-md transition-all duration-500 ease-in-out ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  view === "list" ? "left-[4px]" : "left-[50.5%]"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setView("list")}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`relative flex items-center justify-center gap-2 px-6 py-1.5 w-1/2 z-10 transition-colors duration-300 text-sm sm:text-base ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  view === "list" ? "text-white" : "text-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } font-medium`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <List className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>List View</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setView("graph")}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`relative flex items-center justify-center gap-2 px-6 py-1.5 w-1/2 z-10 transition-colors duration-300 text-sm sm:text-base whitespace-nowrap ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  view === "graph" ? "text-white" : "text-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } font-medium`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <BarChart3 className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Graphical View</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto px-2 relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {queryType === "bdProjection" ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <BdProjection
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  inquiries={inquiries}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  projections={projections}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : view === "list" ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <InquiryList
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  data={sortedInquiries}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  queryType={queryType}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  loading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Suspense
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fallback={
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-center py-10">\n Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="animate-spin h-6 w-6 border-b-2 border-blue-600 rounded-full"></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <GraphicalAnalysis
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  data={sortedInquiries}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  queryType={queryType}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Suspense>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </main>
Â  Â  </div>
Â  );
}